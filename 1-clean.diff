diff --git a/nixos/modules/misc/ids.nix b/nixos/modules/misc/ids.nix
index e1efb1acf26..a0f5ce72f33 100644
--- a/nixos/modules/misc/ids.nix
+++ b/nixos/modules/misc/ids.nix
@@ -347,7 +347,6 @@ in
       #mailman = 316;  # removed 2019-08-30
       zigbee2mqtt = 317;
       # shadow = 318; # unused
-      peertube = 319;
 
       # When adding a uid, make sure it doesn't match an existing gid. And don't use uids above 399!
 
@@ -650,7 +649,6 @@ in
       #mailman = 316;  # removed 2019-08-30
       zigbee2mqtt = 317;
       shadow = 318;
-      peertube = 319;
 
       # When adding a gid, make sure it doesn't match an existing
       # uid. Users and groups with the same name should have equal
diff --git a/nixos/modules/services/web-apps/peertube.nix b/nixos/modules/services/web-apps/peertube.nix
index 38c3f21a549..9819c75ecaa 100644
--- a/nixos/modules/services/web-apps/peertube.nix
+++ b/nixos/modules/services/web-apps/peertube.nix
@@ -1,11 +1,7 @@
 { lib, pkgs, config, ... }:
 
 let
-  name = "peertube";
   cfg = config.services.peertube;
-
-  uid = config.ids.uids.peertube;
-  gid = config.ids.gids.peertube;
 in
 {
   options.services.peertube = {
@@ -13,13 +9,13 @@ in
 
     user = lib.mkOption {
       type = lib.types.str;
-      default = name;
+      default = "peertube";
       description = "User account under which Peertube runs";
     };
 
     group = lib.mkOption {
       type = lib.types.str;
-      default = name;
+      default = "peertube";
       description = "Group under which Peertube runs";
     };
 
@@ -68,7 +64,7 @@ in
 
     runtimeDir = lib.mkOption {
       type = lib.types.path;
-      default = "/var/lib/${name}";
+      default = "/var/lib/peertube";
       description = "The directory where Peertube stores its runtime data.";
     };
 
@@ -82,27 +78,28 @@ in
   };
 
   config = lib.mkIf cfg.enable {
-    users.users = lib.optionalAttrs (cfg.user == name) {
-      "${name}" = {
-        inherit uid;
-        group = cfg.group;
-        description = "Peertube user";
+
+    users.users = lib.optionalAttrs (cfg.user == "peertube") {
+     peertube = {
+        isSystemUser = true;
         home = cfg.runtimeDir;
-        useDefaultShell = true;
+        group = cfg.group;
         # todo: fix this. needed for postgres authentication
         password = "peertube";
       };
     };
-    users.groups = lib.optionalAttrs (cfg.group == name) {
-      "${name}" = {
-        inherit gid;
-      };
+
+    users.groups = lib.optionalAttrs (cfg.group == "peertube") {
+      peertube = { };
     };
 
     services.postgresql = lib.mkIf cfg.database.createLocally {
       enable = true;
-      ensureUsers = [ { name = cfg.database.user; }];
-      # The database is created as a startup script of the peertube service.
+      ensureUsers = [{
+        name = cfg.database.user;
+        ensurePermissions = { "DATABASE ${cfg.database.name}" = "ALL PRIVILEGES"; };
+      }];
+      ensureDatabases = [ cfg.database.name ];
       authentication = ''
         host ${cfg.database.name} ${cfg.database.user} 127.0.0.1/32 trust
         host ${cfg.database.name} ${cfg.database.user} 127.0.0.1/32 md5
@@ -119,7 +116,8 @@ in
 
     # Make sure the runtimeDir exists with the desired permissions.
     systemd.tmpfiles.rules = [
-      "d \"${cfg.runtimeDir}\" - ${cfg.user} ${cfg.group} - -"
+      "d '${cfg.runtimeDir}' 0750 ${cfg.user} ${cfg.group} - -"
+      "d '/var/www/peertube' 0750 ${cfg.user} ${cfg.group} - -"
     ];
 
     systemd.services.peertube = {
@@ -146,41 +144,25 @@ in
         WorkingDirectory = cfg.package;
         StateDirectory = "peertube";
         StateDirectoryMode = "0750";
-        PrivateTmp = true;
         ProtectHome = true;
         ProtectControlGroups = true;
         ProtectSystem = "full";
         Restart = "always";
         Type = "simple";
+        RestartSec = 20;
         TimeoutSec = 60;
         CapabilityBoundingSet = "~CAP_SYS_ADMIN";
         ExecStartPre = let script = pkgs.writeScript "peertube-pre-start.sh" ''
           #!/bin/sh
-          set -e
-
-          if ! [ -e "${cfg.runtimeDir}/.first_run" ]; then
-            set -v
-            if [ -e "${cfg.runtimeDir}/.first_run_partial" ]; then
-              echo "Warn: first run was interrupted"
-            fi
-            touch "${cfg.runtimeDir}/.first_run_partial"
-
-            echo "Running PeerTube's PostgreSQL initialization..."
-            echo "PeerTube is known to work with PostgreSQL v12, if any error occurs, please check your version."
-
-            sudo -u postgres "${config.services.postgresql.package}/bin/createdb" -O ${cfg.database.user} -E UTF8 -T template0 ${cfg.database.name}
-            sudo -u postgres "${config.services.postgresql.package}/bin/psql" -c "CREATE EXTENSION pg_trgm;" ${cfg.database.name}
-            sudo -u postgres "${config.services.postgresql.package}/bin/psql" -c "CREATE EXTENSION unaccent;" ${cfg.database.name}
-
-            touch "${cfg.runtimeDir}/.first_run"
-            rm "${cfg.runtimeDir}/.first_run_partial"
-          fi
+          sudo -u postgres "${config.services.postgresql.package}/bin/psql" -c "CREATE EXTENSION IF NOT EXISTS pg_trgm;" ${cfg.database.name}
+          sudo -u postgres "${config.services.postgresql.package}/bin/psql" -c "CREATE EXTENSION IF NOT EXISTS unaccent;" ${cfg.database.name}
         '';
         in "+${script}";
+        PrivateTmp = true;
       };
 
       unitConfig.RequiresMountsFor = cfg.runtimeDir;
     };
   };
 }
-
+git diff 
\ No newline at end of file
